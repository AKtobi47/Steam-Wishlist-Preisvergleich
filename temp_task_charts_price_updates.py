#!/usr/bin/env python3
"""
Enhanced Background Task: charts_price_updates
Generated by Enhanced Universal Background Scheduler v2.0 - FINAL FIXED VERSION
"""

import os
import sys
import time
import signal
from pathlib import Path
from datetime import datetime

# Project root hinzufügen
project_root = Path("B:\Dokumente\.Studium\7\BIGData\Steam-Wishlist-Preisvergleich")
sys.path.insert(0, str(project_root))

# Enhanced Imports
try:
    import price_tracker
    print(f"✅ Enhanced Import: price_tracker")
except ImportError as e:
    print(f"❌ Enhanced Import Failed: price_tracker: {e}")
    raise
try:
    import steam_wishlist_manager
    print(f"✅ Enhanced Import: steam_wishlist_manager")
except ImportError as e:
    print(f"❌ Enhanced Import Failed: steam_wishlist_manager: {e}")
    raise


# Progress Bar Setup
try:
    from tqdm import tqdm
    progress_available = True
except ImportError:
    progress_available = False
    
    class DummyTqdm:
        def __init__(self, *args, **kwargs):
            pass
        def __enter__(self):
            return self
        def __exit__(self, *args):
            pass
        def update(self, *args):
            pass
        def set_description(self, desc):
            print(f"📊 {desc}")
    
    tqdm = DummyTqdm



def update_heartbeat():
    import json
    from datetime import datetime
    heartbeat_data = {
        "task_type": "charts_price_updates",
        "last_heartbeat": datetime.now().isoformat(),
        "status": "running",
        "parent_pid": 48148
    }
    try:
        with open("heartbeats\charts_price_updates_heartbeat.json", "w") as f:
            json.dump(heartbeat_data, f)
    except Exception as e:
        print(f"Heartbeat error: {e}")


# Task-Funktion (FINAL FIXED - DIREKT VERWENDET)
# Enhanced Charts-Preis-Update Task
print("💰 Enhanced Charts-Preis-Update gestartet...")
print(f"⏰ Start: {datetime.now().strftime('%H:%M:%S')}")

# Heartbeat alle 30 Sekunden
import threading

def heartbeat_timer():
    while True:
        update_heartbeat()
        time.sleep(30)

heartbeat_thread = threading.Thread(target=heartbeat_timer, daemon=True)
heartbeat_thread.start()

try:
    # Price Tracker mit Charts laden
    from price_tracker import create_price_tracker
    from steam_wishlist_manager import load_api_key_from_env
    
    api_key = load_api_key_from_env()
    tracker = create_price_tracker(api_key=api_key, enable_charts=True)
    
    if not tracker.charts_enabled:
        print("❌ Charts-Manager nicht verfügbar")
        exit(1)
    
    # Charts-Spiele Preise aktualisieren
    print("💰 Aktualisiere Preise für Charts-Spiele...")
    result = tracker.update_charts_prices_now()
    
    if result.get('success', True):
        print("✅ Charts-Preis-Update abgeschlossen:")
        print(f"   📊 {result.get('total_games', 0)} Spiele verarbeitet")
        print(f"   💰 {result.get('price_updates', 0)} Preise aktualisiert")
        print(f"   🎯 {result.get('deals_found', 0)} Deals gefunden")
        
        if result.get('errors'):
            print(f"   ⚠️ {len(result['errors'])} Fehler aufgetreten")
    else:
        print(f"❌ Charts-Preis-Update fehlgeschlagen: {result.get('error', 'Unbekannter Fehler')}")

except Exception as e:
    print(f"❌ Enhanced Charts-Preis-Update Fehler: {e}")
    import traceback
    traceback.print_exc()

print(f"🏁 Enhanced Charts-Preis-Update abgeschlossen um {datetime.now().strftime('%H:%M:%S')}")

# Parent-Process-Monitoring
def check_parent_process():
    """Prüft ob Parent-Prozess noch läuft"""
    try:
        import psutil
        parent_pid = 48148
        if not psutil.pid_exists(parent_pid):
            print("❌ Parent-Prozess beendet - stoppe Task")
            return False
        return True
    except Exception:
        return True

# Signal Handler
def signal_handler(signum, frame):
    print(f"\n⏹️ Signal {signum} empfangen - beende Task")
    sys.exit(0)

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# Hauptausführung
if __name__ == "__main__":
    print("🚀 Enhanced Background Task gestartet: charts_price_updates")
    print(f"📊 Scheduler: Charts")
    print(f"👁️ Parent-PID: 48148")
    print(f"⏰ Heartbeat-Intervall: 30s")
    print("=" * 60)
    
    try:
        # Heartbeat-Thread starten
        import threading
        def heartbeat_worker():
            while True:
                if not check_parent_process():
                    break
                update_heartbeat()
                time.sleep(30)
        
        heartbeat_thread = threading.Thread(target=heartbeat_worker, daemon=True)
        heartbeat_thread.start()
        
        # Task ausführen
        charts_price_updates()
        
        print("✅ Enhanced Background Task abgeschlossen")
        
    except KeyboardInterrupt:
        print("\n⏹️ Task durch Benutzer abgebrochen")
    except Exception as e:
        print(f"❌ Task-Fehler: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Cleanup
        try:
            if os.path.exists("heartbeats\charts_price_updates_heartbeat.json"):
                os.remove("heartbeats\charts_price_updates_heartbeat.json")
        except Exception:
            pass
        print("👋 Enhanced Background Task beendet")
